{
  "競プロテンプレ": {
    "prefix": "cp",
    "body": [
      "import sys, re",
      "from math import ceil, floor, sqrt, pi, factorial, gcd",
      "from copy import deepcopy",
      "from collections import Counter, deque",
      "from heapq import heapify, heappop, heappush",
      "from itertools import accumulate, product, combinations, combinations_with_replacement",
      "from bisect import bisect, bisect_left, bisect_right",
      "from functools import reduce",
      "from decimal import Decimal, getcontext",
      "# input = sys.stdin.readline ",
      "def i_input(): return int(input())",
      "def i_map(): return map(int, input().split())",
      "def i_list(): return list(i_map())",
      "def i_row(N): return [i_input() for _ in range(N)]",
      "def i_row_list(N): return [i_list() for _ in range(N)]",
      "def s_input(): return input()",
      "def s_map(): return input().split()",
      "def s_list(): return list(s_map())",
      "def s_row(N): return [s_input for _ in range(N)]",
      "def s_row_str(N): return [s_list() for _ in range(N)]",
      "def s_row_list(N): return [list(s_input()) for _ in range(N)]",
      "def lcm(a, b): return a * b // gcd(a, b)",
      "sys.setrecursionlimit(10 ** 6)",
      "INF = float('inf')",
      "MOD = 10 ** 9 + 7",
      "num_list = []",
      "str_list = []",
      "",
      "def main():",
          "n = i_input()",
          "a, b = i_map()",
          "num_list = i_list()",
      "",
          "print()",
      "",
      "if __name__ == '__main__':",
          "main()"
    ]
  },
  "最大公約数": {
    "prefix": "gcd",
    "body": [
      "from functools import reduce",
      "",
      "def gcd(numbers: list) -> int:",
      "    return reduce(gcd, numbers)"
    ]
  },
  "最小公倍数": {
    "prefix": "lcm",
    "body": [
      "def lcm_base(x: int, y: int) -> int:",
      "    return (x * y) // gcd([x, y])",
      "",
      "def lcm(numbers: list) -> int:",
      "    return reduce(lcm_base, numbers, 1)"
    ]
  },
  "約数列挙": {
    "prefix": "divisor",
    "body": [
      "def divisor(n: int) -> list:",
      "    res = []",
      "    for i in range(1, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            res.append(i)",
      "            if i != n // i:",
      "                res.append(n // i)",
      "    res.sort()",
      "    return res"
    ]
  },
  "素因数分解": {
    "prefix": "prime",
    "body": [
      "def prime_factorize(n: int) -> list:",
      "    res = []",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        ex = 0",
      "        while n % i == 0:",
      "            ex += 1",
      "            n //= i",
      "        if ex != 0:",
      "            res.append((i, ex))",
      "",
      "    if n != 1:",
      "        res.append((n, 1))",
      "    return res"
    ]
  },
  "素数判定": {
    "prefix": "is_prime",
    "body": [
      "def is_prime(n: int) -> bool:",
      "    if n == 1:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True"
    ]
  },
  "UnionFind": {
    "prefix": "uf",
    "body": [
      "class UnionFind:",
      "# 作りたい要素数nで初期化",
      "# 使用するインスタンス変数の初期化",
      "def __init__(self, n):",
      "    self.n = n",
      "    # root[x]<0ならそのノードが根かつその値が木の要素数",
      "    # rootノードでその木の要素数を記録する",
      "    self.root = [-1]*(n+1)",
      "    # 木をくっつける時にアンバランスにならないように調整する",
      "    self.rank = [0]*(n+1)",
      "",
      "# ノードxのrootノードを見つける",
      "def findRoot(self, x):",
      "    if(self.root[x] < 0): # 根",
      "        return x",
      "    else:",
      "        # ここで代入しておくことで、後の繰り返しを避ける",
      "        self.root[x] = self.findRoot(self.root[x])",
      "        return self.root[x]",
      "",
      "# 木の併合、入力は併合したい各ノード",
      "def unite(self, x, y):",
      "    # 入力ノードのrootノードを見つける",
      "    x = self.findRoot(x)",
      "    y = self.findRoot(y)",
      "    # すでに同じ木に属していた場合",
      "    if x == y:",
      "        return ",
      "    # 違う木に属していた場合rankを見てくっつける方を決める",
      "    if self.rank[x] > self.rank[y]:",
      "        self.root[x] += self.root[y]",
      "        self.root[y] = x",
      "    else:",
      "        self.root[y] += self.root[x]",
      "        self.root[x] = y",
      "        # rnkが同じ（深さに差がない場合）は1増やす",
      "        if self.rank[x] == self.rank[y]:",
      "            self.rank[y] += 1",
      "",
      "# xとyが同じグループに属するか判断",
      "def isSameGroup(self, x, y):",
      "    return self.findRoot(x) == self.findRoot(y)",
      "",
      "# ノードxが属する木のサイズを返す",
      "def count(self, x):",
      "    return -self.root[self.findRoot(x)]"
    ] 
  }
}
